{"version":3,"sources":["assets/images/nav_before.png","assets/images/edit_icon.png","assets/images/save_icon.png","assets/images/nav_next.png","components/title/title.js","api/api.js","actions/actionCreator.js","constants.js","components/login/loginForm.js","components/login/login.js","components/task-list/FormAddNewTask.js","components/item-task/task-item.js","components/task-list/task-list.js","components/footer/footer.js","components/pagination/pagination.js","components/pagination/pagination-container.js","components/task/task.js","components/task/task-container.js","App.js","serviceWorker.js","reducers/taskReducer.js","reducers/filterReducer.js","reducers/authReducer.js","reducers/index.js","store.js","index.js"],"names":["module","exports","Title","title","className","defaultProp","instance","axios","create","baseURL","taskApi","pageNumber","get","then","response","data","form","post","id","authApi","getTasks","payload","type","setCurrentPage","currentPage","setUserData","login","token","isAuth","errorLogin","errorData","getTasksThunkCreator","PageNumber","dispatch","a","status","message","console","error","LoginForm","onClickFormLoginBtn","loginInput","pasInput","handlerInputChange","onSubmit","name","placeholder","onChange","value","Login","onClickLoginBtn","onClick","FormAddNewTask","state","addTask","username","usernameInp","email","emailInp","text","textTaskInp","TaskItem","saveEditTask","handlerEditMode","isEditMode","idEditTask","checked","disabled","src","iconSave","iconEdit","defaultProps","TaskList","tasks","changeAddTaskMode","map","isAddNewTask","addNewTaskInput","FILTER_BTN","Footer","totalTaskCount","activeFilter","changeFilter","key","Pagination","pages","stepNumber","setStepNumber","stepCount","leftStepPageNumber","rightStepPageNumber","onPageChange","navBefore","filter","p","navNext","connect","store","pageSize","taskReducer","stepSizes","pagesCount","Math","ceil","i","push","useState","Task","props","filterTasks","filterReducer","isTasksExist","length","filteredTasks","TaskContainer","initializeState","setState","target","event","preventDefault","addNewTaskThunkCreator","saveEditTaskThunkCreator","loginThunkCreator","this","Component","authReducer","FormData","append","password","App","Boolean","window","location","hostname","match","TASKS_start","action","total_task_count","initialState","rootReducer","combineReducers","compose","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5ff30552.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nav_before.67166eb1.png\";","module.exports = __webpack_public_path__ + \"static/media/edit_icon.936f8885.png\";","module.exports = __webpack_public_path__ + \"static/media/save_icon.bf13633a.png\";","module.exports = __webpack_public_path__ + \"static/media/nav_next.1fa82738.png\";","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './title.css';\r\n\r\nconst Title = ({title}) => (\r\n    <h1 className='tasks__title'>{title}</h1>\r\n)\r\n\r\nTitle.propTypes = {\r\n    title: PropTypes.string,\r\n}\r\n\r\nTitle.defaultProp = {\r\n    title: 'List Task',\r\n}\r\n\r\nexport default Title;","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://uxcandy.com/~shapoval/test-task-backend/v2/',\r\n})\r\n\r\nexport const taskApi = {\r\n    getTasks (pageNumber = 1) {\r\n        return instance.get(`?developer=Test&page=${pageNumber}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n\r\n    addNewTask (form)  {\r\n        return instance.post(`create?developer=Test`, form)\r\n            .then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n\r\n    saveEditTask (id, form)  {\r\n        return instance.post(`edit/${id}?developer=Test`, form)\r\n            .then(response => {\r\n                return response.data\r\n        })\r\n    },\r\n}\r\n\r\nexport const authApi = {\r\n    login (form) {\r\n        return instance.post(`login?developer=Test`, form )\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n\r\n\r\n","import {\r\n    CHANGE_FILTER,\r\n    GET_TASKS,\r\n    SET_CURRENT_PAGE,\r\n    SET_USER_DATA,\r\n    ERROR_LOGIN, ERROR_DATA,\r\n} from \"../constants\";\r\n\r\nimport {authApi, taskApi} from \"../api/api\";\r\n\r\nexport const changeFilter = activeFilter => ({\r\n    type: CHANGE_FILTER,\r\n    activeFilter,\r\n})\r\n\r\nexport const getTasks = (payload) => ({\r\n    type: GET_TASKS,\r\n    payload,\r\n})\r\n\r\nexport const setCurrentPage = (currentPage) => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage,\r\n})\r\n\r\nexport const setUserData = (login, token, isAuth) => ({\r\n    type: SET_USER_DATA,\r\n    login,\r\n    token,\r\n    isAuth,\r\n})\r\n\r\nexport const errorLogin = (payload) => ({\r\n    type: ERROR_LOGIN,\r\n    payload,\r\n})\r\n\r\nexport const errorData = (payload) => ({\r\n    type: ERROR_DATA,\r\n    payload,\r\n})\r\n\r\n\r\n\r\n//redux-thunk\r\nexport const getTasksThunkCreator = (PageNumber = 1) => async (dispatch) => {\r\n    dispatch(setCurrentPage(PageNumber))\r\n    const response = await taskApi.getTasks(PageNumber)\r\n    response.status === 'ok'\r\n        ? dispatch(getTasks(response.message))\r\n        : console.error(response.message)\r\n}\r\n\r\nexport const addNewTaskThunkCreator = (usernameInp, emailInp, textTaskInp) => async (dispatch) =>  {\r\n    debugger\r\n    let form = new FormData()\r\n    form.append(\"username\", usernameInp)\r\n    form.append(\"email\", emailInp)\r\n    form.append(\"text\", textTaskInp)\r\n\r\n    const response = await taskApi.addNewTask(form)\r\n\r\n    response.status === 'ok'\r\n        ? dispatch(getTasksThunkCreator())\r\n        : dispatch(errorData(response.message))\r\n}\r\n\r\nexport const saveEditTaskThunkCreator = (id, textTaskInp, status, token, currentPage) => async (dispatch) => {\r\n    status ? status = 10 : status = 0;\r\n    let form = new FormData()\r\n    form.append(\"text\", textTaskInp)\r\n    form.append(\"status\", status)\r\n    form.append(\"token\", token)\r\n    debugger\r\n    const response = await taskApi.saveEditTask(id, form)\r\n    response.status === 'ok'\r\n        ? dispatch(getTasksThunkCreator(currentPage))\r\n        : dispatch(errorData(response.message))\r\n}\r\n\r\nexport const loginThunkCreator = (login = 'admin', password = '123') => async (dispatch) => {\r\n    let form = new FormData()\r\n    form.append(\"username\", login)\r\n    form.append(\"password\", password)\r\n\r\n    const response = await authApi.login(form)\r\n    response.status === 'ok'\r\n        ? dispatch(setUserData(login, response.message.token, true))\r\n        : dispatch(errorLogin(response.message))\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","export const CHANGE_FILTER = 'CHANGE_FILTER';\r\nexport const GET_TASKS = 'GET_TASKS';\r\nexport const SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nexport const GET_SORT_TASKS = 'GET_SORT_TASKS';\r\nexport const SET_USER_DATA = 'SET_USER_DATA';\r\nexport const ERROR_LOGIN = 'ERROR_LOGIN';\r\nexport const ERROR_DATA = 'ERROR_DATA';\r\n\r\n","import React from \"react\";\r\n\r\nimport './loginForm.css'\r\n\r\nconst LoginForm = ({onClickFormLoginBtn, loginInput, pasInput, handlerInputChange, errorData}) => (\r\n    <form className='tasks__loginForm' onSubmit={onClickFormLoginBtn} >\r\n            {errorData &&\r\n                 <div className='textError'>\r\n                        {errorData}\r\n                </div>\r\n            }\r\n            <div className='tasks__loginForm__content'>\r\n                <input\r\n                    className={errorData\r\n                        ? 'tasks__loginForm__input tasks__loginForm__login error'\r\n                        : 'tasks__loginForm__input tasks__loginForm__login'}\r\n                    name='loginInput'\r\n                    placeholder='Логин'\r\n                    onChange={handlerInputChange}\r\n                    value={loginInput}\r\n                />\r\n                <input\r\n                    className={errorData\r\n                        ? 'tasks__loginForm__input tasks__loginForm__password error'\r\n                        : 'tasks__loginForm__input tasks__loginForm__password'}\r\n                    name='pasInput'\r\n                    type='password'\r\n                    placeholder='Пароль'\r\n                    onChange={handlerInputChange}\r\n                    value={pasInput}\r\n                />\r\n                <button className='primaryBtn' type='submit'>Войти</button>\r\n        </div>\r\n\r\n    </form>\r\n)\r\n\r\nexport default LoginForm;\r\n","import React from \"react\";\r\n\r\nimport LoginForm from \"../../components/login/loginForm\";\r\n\r\nconst Login = ({isAuth, login, onClickFormLoginBtn, onClickLoginBtn, loginInput, pasInput, handlerInputChange, errorLogin}) => (\r\n\r\n    <div className='tasks__authorization'>\r\n        { !isAuth && <button\r\n            className='tasks__authorization__autoLogin primaryBtn'\r\n            title='Автоматически заполняться \"Логин\" и \"Пароль\", если забыли(не знали)'\r\n            onClick={onClickLoginBtn}\r\n        >Авто вход</button>}\r\n        {isAuth\r\n            ? <span>Приветствую {login}</span>\r\n            : <LoginForm\r\n                onClickFormLoginBtn={onClickFormLoginBtn}\r\n                loginInput={loginInput}\r\n                pasInput={pasInput}\r\n                handlerInputChange={handlerInputChange}\r\n                errorData={errorLogin}\r\n            />\r\n        }\r\n    </div>\r\n)\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\n\r\nconst FormAddNewTask = ({ state, errorData, addTask, handlerInputChange }) => (\r\n    <form className='tr' onSubmit={addTask}>\r\n        <div className='td'>\r\n            <input\r\n                className={errorData.username\r\n                    ? 'tasks__list__input tasks__list__username error '\r\n                    : 'tasks__list__input tasks__list__username'}\r\n                name='usernameInp'\r\n                placeholder='Имя пользователя'\r\n                onChange={handlerInputChange}\r\n                value={state.usernameInp}\r\n            />{errorData.username && <label className='textError'>{errorData.username}</label>}\r\n        </div>\r\n        <div className='td'>\r\n            <input\r\n                className={errorData.email\r\n                    ? 'tasks__list__input tasks__list__email error '\r\n                    : 'tasks__list__input tasks__list__email'}\r\n                name='emailInp'\r\n                placeholder='Почта'\r\n                onChange={handlerInputChange}\r\n                value={state.emailInp}\r\n            />{errorData.email && <label className='textError'>{errorData.email}</label>}\r\n        </div>\r\n        <div className='td'>\r\n            <input\r\n                className={errorData.text\r\n                    ? 'tasks__list__input tasks__list__textTask error'\r\n                    : 'tasks__list__input tasks__list__textTask'}\r\n                name='textTaskInp'\r\n                placeholder='Текст новой задачи'\r\n                onChange={handlerInputChange}\r\n                value={state.textTaskInp}\r\n            />{errorData.text && <label className='textError'>{errorData.text}</label>}\r\n        </div>\r\n        <div className='td'></div>\r\n        <div className='td'>\r\n            <button className='primaryBtn' type='submit' title='Добавить новую задачу'>Добавить</button>\r\n        </div>\r\n    </form>\r\n);\r\n\r\nexport default FormAddNewTask;\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport iconEdit from '../../assets/images/edit_icon.png'\r\nimport iconSave from '../../assets/images/save_icon.png'\r\n\r\nimport './task-item.css'\r\n\r\n\r\nconst TaskItem = ({ id, username, text, email, status, isAuth, saveEditTask, state, handlerInputChange, handlerEditMode }) => (\r\n\r\n    <div className={ status ? 'completed text tr' : 'text tr'}>\r\n        {/*<div className='td'>{id}</div>*/}\r\n        <div className='td'>{username}</div>\r\n        <div className='td'>{email}</div>\r\n        { (state.isEditMode && id === state.idEditTask)\r\n            ? <div className='td'>\r\n                    <input\r\n                        className='tasks__list__input tasks__list__textTask'\r\n                        name='textTaskInp'\r\n                        placeholder='Текст новой задачи'\r\n                        onChange={handlerInputChange}\r\n                        value={state.textTaskInp}\r\n                    />\r\n                </div>\r\n            : <div className='td'>{text}</div>\r\n        }\r\n        { (state.isEditMode && id === state.idEditTask )\r\n            ? <div className='td'>\r\n                <input\r\n                    type='checkbox'\r\n                    name='status'\r\n                    title='Выполнено?'\r\n                    onChange={handlerInputChange}\r\n                    checked={state.status}\r\n                />\r\n            </div>\r\n            : <div className='td'>\r\n                <input\r\n                    type='checkbox'\r\n                    name='status'\r\n                    title='Выполнено?'\r\n                    onChange={handlerInputChange}\r\n                    checked={status}\r\n                    disabled\r\n                />\r\n            </div>\r\n        }\r\n        {   isAuth ?\r\n            (state.isEditMode && id === state.idEditTask)\r\n                ? <div className='td'>\r\n                    <img className='save-icon' src={iconSave} onClick={() => saveEditTask(id)}></img>\r\n                    </div>\r\n                : <div className='td'>\r\n                    <img className='edit-icon' src={iconEdit} onClick={() => handlerEditMode(id, username, email, text, status)}></img>\r\n\r\n                    </div>\r\n            :  <span></span>\r\n        }\r\n    </div>\r\n);\r\n\r\nTaskItem.propTypes = {\r\n    id: PropTypes.number,\r\n    username: PropTypes.string,\r\n    email: PropTypes.string,\r\n    text: PropTypes.string,\r\n    status: PropTypes.bool,\r\n    isAuth: PropTypes.bool,\r\n    saveEditTask: PropTypes.func,\r\n    handlerInputChange: PropTypes.func,\r\n    handlerEditMode: PropTypes.func,\r\n\r\n}\r\n\r\nTaskItem.defaultProps = {\r\n    id: '',\r\n    username: '',\r\n    email: '',\r\n    text: '',\r\n    status: false,\r\n    isAuth: false,\r\n    saveEditTask: () => {},\r\n    handlerInputChange: () => {},\r\n    handlerEditMode: () => {},\r\n}\r\n\r\nexport default TaskItem;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './task-list.css';\r\n \r\nimport FormAddNewTask from './FormAddNewTask';\r\nimport TaskItem from \"../item-task/task-item\";\r\n\r\nconst TaskList = ({tasks, addTask, errorData, saveEditTask, isAuth, state,\r\n                      changeAddTaskMode, handlerInputChange, handlerEditMode}) => (\r\n\r\n    <div  className='tasks__list table'>\r\n        <div className='tr'>\r\n            <div className='th'>{'Пользователь'}</div>\r\n            <div className='th'>{'Email'}</div>\r\n            <div className='th'>{'Текст задачи'}</div>\r\n            <div className='th'>{`Выполенено`}</div>\r\n            {isAuth && <div className='th'>{'Действия'}</div>}\r\n        </div>\r\n        {tasks.map( ({id, username, text, email, status} ) => (\r\n                <TaskItem id={id}\r\n                          username={username}\r\n                          text={text}\r\n                          email={email}\r\n                          status={status}\r\n                          isAuth={isAuth}\r\n                          saveEditTask={saveEditTask}\r\n                          state={state}\r\n                          handlerInputChange={handlerInputChange}\r\n                          handlerEditMode={handlerEditMode}\r\n                />\r\n            )\r\n        )}\r\n        {!state.isAddNewTask //  добавления новой задачи (форма добавления)\r\n            ? <div>\r\n                <button\r\n                    className='tasks__list__newTask primaryBtn'\r\n                    onClick={() => changeAddTaskMode()}\r\n                    title='Добавить новую задачу'>Добавить задачу\r\n                </button>\r\n                <span className='tasks__list__infoLabel'></span>\r\n            </div>\r\n            : <FormAddNewTask state={state} errorData={errorData} addTask={addTask} handlerInputChange={handlerInputChange}/>\r\n        }\r\n    </div>\r\n\r\n\r\n)\r\n\r\nTaskList.propTypes = {\r\n    tasks: PropTypes.array,\r\n    addTask: PropTypes.func,\r\n    addNewTaskInput: PropTypes.func,\r\n    saveEditTask: PropTypes.func,\r\n    handlerInputChange: PropTypes.func,\r\n    handlerEditMode: PropTypes.func,\r\n    isAddNewTask: PropTypes.bool,\r\n    isAuth: PropTypes.bool,\r\n}\r\n\r\nTaskList.defaultProps = {\r\n    tasks: [],\r\n    addTask: () => {},\r\n    addNewTaskInput: () => {},\r\n    saveEditTask: () => {},\r\n    handlerInputChange: () => {},\r\n    handlerEditMode: () => {},\r\n    isAddNewTask: false,\r\n    isAuth: false,\r\n}\r\n\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './footer.css';\r\n\r\nconst FILTER_BTN = [\r\n    {\r\n        id: 'all',\r\n        text: 'Все'\r\n    },\r\n    {\r\n        id: 'active',\r\n        text: 'Активные'\r\n    },\r\n    {\r\n        id: 'completed',\r\n        text: 'Выполненые'\r\n    },\r\n]\r\n\r\nconst Footer = ({totalTaskCount, activeFilter, changeFilter}) => (\r\n    <div className='footer'>\r\n        <span className='footer__amount__task'>{`Всего: ${totalTaskCount} `}</span>\r\n        <div className='footer__filter'>\r\n            {FILTER_BTN.map( ({id, text}) => (\r\n                <button\r\n                    onClick={ () => {changeFilter(id)}}\r\n                    key={id}\r\n                    className={id === activeFilter ? 'footer__filter__btn active' : 'footer__filter__btn'}>\r\n                {text}</button>\r\n                )\r\n            )}\r\n        </div>\r\n    </div>\r\n)\r\nFooter.propTypes = {\r\n    totalTaskCount: PropTypes.number,\r\n    activeFilter: PropTypes.func,\r\n    changeFilter: PropTypes.func,\r\n}\r\n\r\nFooter.defaultProp = {\r\n    totalTaskCount: 0,\r\n    activeFilter: () => {},\r\n    changeFilter: () => {},\r\n}\r\n\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nimport navNext from '../../assets/images/nav_next.png'\r\nimport navBefore from '../../assets/images/nav_before.png'\r\nimport './pagination.css'\r\n\r\n\r\nconst Pagination = ({pages, stepNumber, setStepNumber, stepCount, leftStepPageNumber, rightStepPageNumber, currentPage, onPageChange}) => {\r\n\r\n    return <div className=\"tasks__pagination\">\r\n        <div className='tasks__pagination__content'>\r\n            {stepNumber > 1 &&\r\n                <button className='tasks__pagination__btn' src={navBefore} onClick={() => {\r\n                    setStepNumber(stepNumber - 1)\r\n                }}>\r\n                    <img src={navBefore} />\r\n                </button>\r\n            }\r\n            {pages\r\n                .filter(p => p >= leftStepPageNumber && p <= rightStepPageNumber)\r\n                .map((p) => {\r\n                    return <span\r\n                        className={currentPage === p ? 'tasks_pagination_item selectedPage' : 'tasks_pagination_item'}\r\n                        key={p}\r\n                        onClick={() => {\r\n                            onPageChange(p)\r\n                        }}\r\n                    >{p}</span>\r\n                })\r\n            }\r\n            {stepCount > stepNumber &&\r\n            <button className='tasks__pagination__btn' onClick={() => {\r\n                setStepNumber(stepNumber + 1)\r\n            }}>\r\n                <img src={navNext}/>\r\n            </button>\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Pagination;\r\n","import React, {useState} from \"react\";\r\nimport {connect} from 'react-redux';\r\n\r\nimport Pagination from \"./pagination\";\r\n\r\n\r\nconst PaginationContainer = ({ pageSize, totalTaskCount, currentPage, onPageChange, stepSizes = 10}) => {\r\n    // подсчет общего количества страниц\r\n    let pagesCount = Math.ceil(totalTaskCount / pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    //подсчет общего количество шагов по 10 страниц\r\n    let stepCount = Math.ceil(pagesCount / stepSizes)\r\n    let [stepNumber, setStepNumber] = useState(1)\r\n\r\n    let leftStepPageNumber = (stepNumber - 1) * stepSizes + 1\r\n    let rightStepPageNumber = stepNumber * stepSizes\r\n\r\n    let arrPage = {}\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        arrPage = {\r\n            i: i,\r\n        }\r\n    }\r\n    return (\r\n        <Pagination\r\n            pages={pages}\r\n            stepCount={stepCount}\r\n            stepNumber={stepNumber}\r\n            setStepNumber={setStepNumber}\r\n            leftStepPageNumber={leftStepPageNumber}\r\n            rightStepPageNumber={rightStepPageNumber}\r\n            currentPage={currentPage}\r\n            onPageChange={onPageChange}\r\n        />\r\n    )\r\n\r\n}\r\n\r\nexport default connect(\r\n    (store) => ({\r\n        pageSize: store.taskReducer.pageSize,\r\n        totalTaskCount: store.taskReducer.totalTaskCount,\r\n    })\r\n)(PaginationContainer);\r\n","import React from \"react\";\r\n\r\nimport Login from \"../login/login\";\r\nimport TaskList from '../task-list/task-list';\r\nimport Footer from '../footer/footer';\r\nimport PaginationContainer from \"../pagination/pagination-container\";\r\n\r\nimport './task.css'\r\n\r\nconst Task = ({\r\n                  props, state, onClickFormLoginBtn, onClickLoginBtn, addTask, saveEditTask,\r\n                  filterTasks, handlerInputChange, changeAddTaskMode, handlerEditMode, onPageChange\r\n              }) =>\r\n    {\r\n    const {tasks, filterReducer, isAuth} = props;\r\n    const isTasksExist = tasks && tasks.length > 0;\r\n    const filteredTasks = filterTasks(tasks, filterReducer);\r\n    return (\r\n        <div className='tasks__content'>\r\n            <Login\r\n                isAuth={isAuth}\r\n                login={props.login}\r\n                onClickFormLoginBtn={onClickFormLoginBtn}\r\n                onClickLoginBtn={onClickLoginBtn}\r\n                loginInput={state.loginInput}\r\n                pasInput={state.pasInput}\r\n                handlerInputChange={handlerInputChange}\r\n                errorLogin={props.errorLogin}\r\n            />\r\n            {isTasksExist && <TaskList\r\n                tasks={filteredTasks}\r\n                addTask={addTask}\r\n                saveEditTask={saveEditTask}\r\n                isAuth={isAuth}\r\n                state={state}\r\n                changeAddTaskMode={changeAddTaskMode}\r\n                handlerInputChange={handlerInputChange}\r\n                handlerEditMode={handlerEditMode}\r\n                errorData={props.errorData}\r\n            />}\r\n\r\n            <PaginationContainer\r\n                currentPage={props.currentPage}\r\n                onPageChange={onPageChange}\r\n            />\r\n            <Footer\r\n                totalTaskCount={props.totalTaskCount}\r\n                activeFilter={filterReducer}\r\n                changeFilter={props.changeFilter}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task;\r\n","import React, {Component} from \"react\";\r\nimport {connect} from 'react-redux';\r\n\r\nimport {\r\n    changeFilter,\r\n    getTasksThunkCreator,\r\n    addNewTaskThunkCreator,\r\n    loginThunkCreator,\r\n    saveEditTaskThunkCreator\r\n} from \"../../actions/actionCreator\";\r\nimport Task from \"./task\";\r\n\r\n\r\nclass TaskContainer extends Component {\r\n\r\n    state = {\r\n        isEditMode: false,\r\n        idEditTask: '',\r\n        isAddNewTask: false,\r\n        usernameInp: '',\r\n        emailInp: '',\r\n        textTaskInp: '',\r\n        status: 0,\r\n        loginInput: '',\r\n        pasInput: '',\r\n    }\r\n\r\n    initializeState = () => {\r\n        this.setState({\r\n            isEditMode: false,\r\n            idEditTask: '',\r\n            isAddNewTask: false,\r\n            usernameInp: '',\r\n            emailInp: '',\r\n            textTaskInp: '',\r\n            status: 0,\r\n        })\r\n    }\r\n\r\n    handlerEditMode = (id, username, email, text, status) => {\r\n        let {isEditMode} = this.state\r\n        this.setState({\r\n            isEditMode: !isEditMode,\r\n            idEditTask: id,\r\n            usernameInp: username,\r\n            emailInp: email,\r\n            textTaskInp: text,\r\n            status: status,\r\n        })\r\n    }\r\n\r\n// обработчик на изменения значения в input всех\r\n    handlerInputChange = ({target: {type, value, name, checked}}) => {\r\n        this.setState({[name]: type === 'checkbox' ? checked : value})\r\n    }\r\n\r\n// Фильтрация списка задач по активному фильтру\r\n    filterTasks = (tasks, activeFilter) => {\r\n        switch (activeFilter) {\r\n            case 'completed':\r\n                return tasks.filter(tasks => tasks.status)\r\n                break;\r\n            case 'active':\r\n                return tasks.filter(tasks => !tasks.status)\r\n                break;\r\n            default:\r\n                return tasks;\r\n        }\r\n    }\r\n\r\n    changeAddTaskMode = () => {\r\n        let {isAddNewTask} = this.state;\r\n        this.setState({\r\n            isAddNewTask: !isAddNewTask,\r\n        })\r\n    }\r\n\r\n    addTask = (event) => {\r\n        event.preventDefault();\r\n        this.props.addNewTaskThunkCreator(this.state.usernameInp, this.state.emailInp, this.state.textTaskInp)\r\n    }\r\n\r\n    saveEditTask = (id) => {\r\n        this.props.saveEditTaskThunkCreator(id, this.state.textTaskInp, this.state.status, this.props.token, this.props.currentPage)\r\n        this.initializeState()\r\n    }\r\n\r\n// обработчик нажатия кнопки \"Авто вход\"\r\n    onClickLoginBtn = () => {\r\n        this.setState({\r\n            loginInput: 'admin',\r\n            pasInput: '123',\r\n        })\r\n    }\r\n\r\n// обработчик нажатия кнопки \"Войти\"\r\n    onClickFormLoginBtn = (event) => {\r\n        event.preventDefault()\r\n        this.props.loginThunkCreator(this.state.loginInput, this.state.pasInput)\r\n    }\r\n\r\n// переключение страниц и получения новых данных с API\r\n    onPageChange = (pageNumber) => {\r\n        this.props.getTasksThunkCreator(pageNumber)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getTasksThunkCreator(this.props.currentPage)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Task\r\n                props={this.props}\r\n                state={this.state}\r\n                onClickFormLoginBtn={this.onClickFormLoginBtn}\r\n                onClickLoginBtn={this.onClickLoginBtn}\r\n                addTask={this.addTask}\r\n                saveEditTask={this.saveEditTask}\r\n                filterTasks={this.filterTasks}\r\n                handlerInputChange={this.handlerInputChange}\r\n                handlerEditMode={this.handlerEditMode}\r\n                changeAddTaskMode={this.changeAddTaskMode}\r\n                onPageChange={this.onPageChange}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect((store) => ({\r\n    tasks: store.taskReducer.tasks,\r\n    isAddNewTask: store.taskReducer.isAddNewTask,\r\n    currentPage: store.taskReducer.currentPage,\r\n    errorData: store.taskReducer.errorData,\r\n    totalTaskCount: store.taskReducer.totalTaskCount,\r\n    filterReducer: store.filterReducer,\r\n    isAuth: store.authReducer.isAuth,\r\n    login: store.authReducer.login,\r\n    token: store.authReducer.token,\r\n    errorLogin: store.authReducer.errorLogin,\r\n}), {\r\n    changeFilter, getTasksThunkCreator, addNewTaskThunkCreator,\r\n    loginThunkCreator, saveEditTaskThunkCreator\r\n})(TaskContainer);\r\n","import React, { Fragment } from 'react';\n\n\nimport './App.css';\n\nimport Title from './components/title/title'\nimport TaskContainer from \"./components/task/task-container\";\n\nconst App = () => (\n  <Fragment>\n      <div className='tasks'>\n          <Title title='Список задач'/>\n          <TaskContainer />\n      </div>\n  </Fragment>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {SET_CURRENT_PAGE, GET_TASKS, ERROR_DATA} from \"../constants\";\r\n\r\n\r\nconst TASKS_start = {\r\n    tasks:[\r\n            {\r\n                id: 1,\r\n                username: 'Max',\r\n                text: 'Learn ReactJS',\r\n                email: 'da12@mail.ru',\r\n                status: 0,\r\n            },\r\n            {\r\n                id: 2,\r\n                username: 'Anton',\r\n                text: 'Learn Redux',\r\n                email: 'da44@mail.ru',\r\n                status: 0,\r\n            },\r\n            {\r\n                id: 3,\r\n                username: 'Marina',\r\n                text: 'Learn React Router',\r\n                email: 'dasd@mail.ru',\r\n                status: 0,\r\n            }\r\n    ],\r\n    errorData: {\r\n        username: null,\r\n        email: null,\r\n        text: null,\r\n        token: null\r\n    },\r\n    currentPage: 1,\r\n    pageSize: 3,\r\n    totalTaskCount: 0,\r\n}\r\n\r\nconst taskReducer = (state = TASKS_start, action ) => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case GET_TASKS:\r\n            return {\r\n                ...state,\r\n                tasks: action.payload.tasks,\r\n                totalTaskCount: action.payload.total_task_count,\r\n            }\r\n        case ERROR_DATA:\r\n            return {\r\n                ...state,\r\n                errorData: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default taskReducer;\r\n","import {CHANGE_FILTER} from \"../constants\";\r\n\r\nconst BASE_FILTER = 'all';\r\n\r\nconst filterReducer = (state = BASE_FILTER, { type, activeFilter}) => {\r\n    switch (type) {\r\n        case CHANGE_FILTER:\r\n            return activeFilter;\r\n            break;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default filterReducer;\r\n","import {SET_USER_DATA, ERROR_LOGIN} from \"../constants\";\r\n\r\nconst initialState = {\r\n    login: null,\r\n    token: null,\r\n    isAuth: false,\r\n    errorLogin: null,\r\n}\r\n\r\nconst authReducer = (state = initialState, action ) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action,\r\n            }\r\n        case ERROR_LOGIN:\r\n            return {\r\n                ...state,\r\n                errorLogin: action.payload.password,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport taskReducer from './taskReducer';\r\nimport filterReducer from './filterReducer';\r\nimport authReducer from \"./authReducer\";\r\n\r\nconst rootReducer = combineReducers({ taskReducer, filterReducer, authReducer});\r\n\r\nexport default rootReducer;\r\n","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers/index';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { save } from 'redux-localstorage-simple'\r\n\r\n/* eslint-disable no-underscore-dangle */\r\nconst composeEnhancers =\r\n    process.env.NODE_ENV !== 'production' &&\r\n    typeof window === 'object' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\n/* eslint-enable */\r\n\r\n        // Видео webdev курс сохрание на локалке в сторе\r\n// const configureStore = preloadedState => (\r\n//     createStore(\r\n//         rootReducer,\r\n//         preloadedState,\r\n//         composeEnhancers(\r\n//             applyMiddleware(save ({ namespace: 'task-list'}))\r\n//         ),\r\n//     )\r\n// );\r\n\r\n//const store = configureStore({});\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nwindow.store = store;\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n\nReactDOM.render((\n    <Provider store={store}>\n        <App />\n    </Provider>\n    ), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}